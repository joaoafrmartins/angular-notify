// Generated by CoffeeScript 1.7.1
(function() {
  var NotifyService;

  module.exports = NotifyService = (function() {
    function NotifyService($rootScope, $compile, notifyOptions) {
      this.$rootScope = $rootScope;
      this.$compile = $compile;
      this.levels = notifyOptions.levels, this.timelapse = notifyOptions.timelapse;
      this.initialize();
      if (notifyOptions.global) {
        this.printer.log = console.log;
        global.console = this.printer;
      }
      Object.defineProperty(this, "notes", {
        value: []
      });
    }

    NotifyService.prototype.attach = function(elem) {
      this.elem = elem;
      return this.$rootScope.$broadcast("$onNotifyElementAttached", {
        elem: elem
      });
    };

    NotifyService.prototype.initialize = function() {
      if (this.queue == null) {
        this.queue = [];
      }
      if (this.printer == null) {
        this.printer = {};
      }
      return this.levels.map((function(_this) {
        return function(l) {
          var _l;
          if (_this.debug && l in _this.printer) {
            _l = _this.printer[l].bind(_this.printer);
          }
          return _this.printer[l] = (function(m, o) {
            if (o == null) {
              o = {};
            }
            o.message = m;
            if (o.level == null) {
              o.level = this.level;
            }
            if (o.title == null) {
              o.title = this.level;
            }
            this.notify(o);
            if (this.debug && this.log) {
              return this.log(m);
            }
          }).bind({
            log: _l,
            level: l,
            debug: _this.debug,
            printer: _this.printer,
            notify: _this.notify.bind(_this)
          });
        };
      })(this));
    };

    NotifyService.prototype.notify = function(note) {
      this.queue.push(note);
      if (this.queue.length !== 1) {
        return;
      }
      return this.interval = setInterval((function(_this) {
        return function() {
          if (note = _this.queue.shift()) {
            _this.$rootScope.$broadcast("$onNotifyNoteAdded", note);
          }
          if (!_this.queue.length) {
            return clearInterval(_this.interval);
          }
        };
      })(this), this.timelapse);
    };

    NotifyService.prototype.setNotes = function(notes) {
      return this.notes = notes;
    };

    NotifyService.prototype.getNotes = function() {
      return this.notes;
    };

    return NotifyService;

  })();

}).call(this);
